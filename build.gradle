apply plugin: 'idea'
apply plugin: 'java'

repositories {
  flatDir dirs: "${rootDir}/lib"
  mavenCentral()
  maven {
    url 'https://repository.cloudera.com/artifactory/cloudera-repos/'
  }
}

ext.versions = [
  cloudera_hadoop:      '2.0.0-cdh4.3.0',
  cloudera_hadoop_mr1:  '2.0.0-mr1-cdh4.3.0',
]

configurations {
  all*.exclude module: "commons-daemon"
}

dependencies {
  compile 'xstream:xstream:1.2.2'
  compile 'org.apache.commons:commons-lang3:3.1'
  compile 'com.google.guava:guava:14.0.1'
  compile 'com.google.inject:guice:3.0'

  compile  "org.apache.hadoop:hadoop-annotations:${versions.cloudera_hadoop}"
  compile        "org.apache.hadoop:hadoop-common:${versions.cloudera_hadoop}"
  compile   "org.apache.hadoop:hadoop-hdfs:${versions.cloudera_hadoop}"
  compile    "org.apache.hadoop:hadoop-hdfs:${versions.cloudera_hadoop}:tests"
  compile          "org.apache.hadoop:hadoop-core:${versions.cloudera_hadoop_mr1}"
  compile         "org.apache.hadoop:hadoop-tools:${versions.cloudera_hadoop_mr1}"
  compile          "org.apache.hadoop:hadoop-test:${versions.cloudera_hadoop_mr1}"
  compile                       "org.apache.hadoop:hadoop-common:${versions.cloudera_hadoop}:tests"

  compile 'org.mockito:mockito-all:1.9.5'
  compile 'org.easytesting:fest-assert:1.4'
  compile 'junit:junit:4.11'

}

compileJava {
  sourceCompatibility = 1.6
  targetCompatibility = 1.6
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}

task runInMemory(type: Test, dependsOn: jar) {
  testClassesDir = sourceSets.main.output.classesDir
}

task runOnHadoop(type: Exec, dependsOn: jar) {
  workingDir "${rootDir}/fabric"

  doFirst {
    def allJars = []
    for (file in configurations.compile) {
      allJars.add(file)
    }
    def deploy_args = [files(jar.archivePath).singleFile, allJars.join(';')]
    def run_args = deploy_args + ['pl.rtshadow.lem.benchmarks.RealHdfsRunner']
    if (System.properties['arguments']) {
      run_args.add(System.properties['arguments'])
    }
    commandLine fabric_command_for(System.properties['hosts']) + ["deploy:${deploy_args.join(',')}", "run_jar_silently:${run_args.join(',')}", 'collect_results']
  }
}

task mergeResults(type: JavaExec) {
  inputs.dir System.properties['files']
  outputs.file new File('/tmp/merge_result.csv')

  doFirst {
    def filesToMerge = []
    def dir = new File(System.properties['files'])
    dir.eachFileRecurse(groovy.io.FileType.FILES) { file ->
      filesToMerge << file
    }
    args = filesToMerge
  }

  main = 'pl.rtshadow.lem.benchmarks.benchmarks.ResultsMerger'
  classpath = sourceSets.main.runtimeClasspath
}

def fabric_command_for(String hosts) {
  ['fab', '--abort-on-prompts', '-P', "-H ${hosts}", '-u', 'root']
}



